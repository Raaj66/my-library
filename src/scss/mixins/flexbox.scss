// --------------------------------------------------
// Flexbox SASS mixins
// The spec: http://www.w3.org/TR/css3-flexbox
// 2012 spec, implemented by IE10, https://www.w3.org/TR/2012/WD-css3-flexbox-20120322/
// https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout/Mixins
// --------------------------------------------------

@mixin flexbox() {
	display: box;
	display: box;
	display: flexbox;
	display: flex;
	display: flex;
}

@mixin justify-content($value: flex-start) {
	@if $value == flex-start {
		box-pack: start;
		box-pack: start;
		flex-pack: start;
	} @else if $value == flex-end {
		box-pack: end;
		box-pack: end;
		flex-pack: end;
	} @else if $value == space-between {
		box-pack: justify;
		box-pack: justify;
		flex-pack: justify;
	} @else if $value == space-around {
		flex-pack: distribute;
	} @else {
		box-pack: $value;
		box-pack: $value;
		flex-pack: $value;
	}
	justify-content: $value;
	justify-content: $value;
}

@mixin align-items($value: stretch) {
	@if $value == flex-start {
		box-align: start;
		box-align: start;
		flex-align: start;
	} @else if $value == flex-end {
		box-align: end;
		box-align: end;
		flex-align: end;
	} @else {
		box-align: $value;
		box-align: $value;
		flex-align: $value;
	}
	align-items: $value;
	align-items: $value;
}

@mixin align-self($value: auto) {
	// No Webkit Box Fallback.
	align-self: $value;
	align-self: $value;
	@if $value == flex-start {
		flex-item-align: start;
	} @else if $value == flex-end {
		flex-item-align: end;
	} @else {
		flex-item-align: $value;
	}
}

@mixin flex-direction($value: row) {
	@if $value == row-reverse {
		box-direction: reverse;
		box-orient: horizontal;
		box-direction: reverse;
		box-orient: horizontal;
	} @else if $value == column {
		box-direction: normal;
		box-orient: vertical;
		box-direction: normal;
		box-orient: vertical;
	} @else if $value == column-reverse {
		box-direction: reverse;
		box-orient: vertical;
		box-direction: reverse;
		box-orient: vertical;
	} @else {
		box-direction: normal;
		box-orient: horizontal;
		box-direction: normal;
		box-orient: horizontal;
	}
	flex-direction: $value;
	flex-direction: $value;
	flex-direction: $value;
}

@mixin align-content($value: stretch) {
	// No Webkit Box Fallback.
	align-content: $value;
	align-content: $value;
	@if $value == flex-start {
		flex-line-pack: start;
	} @else if $value == flex-end {
		flex-line-pack: end;
	} @else {
		flex-line-pack: $value;
	}
}

@mixin flex-wrap($value: nowrap) {
	// No Webkit/FF Box fallback.
	flex-wrap: $value;
	flex-wrap: $value;
	@if $value == nowrap {
		flex-wrap: none;
	} @else {
		flex-wrap: $value;
	}
}

@mixin flex-flow(
	$values: (
    row nowrap,
  )
) {
	// No Webkit/FF Box fallback.
	flex-flow: $values;
	flex-flow: $values;
	flex-flow: $values;
}

@mixin order($int: 0) {
	box-ordinal-group: $int + 1;
	box-ordinal-group: $int + 1;
	flex-order: $int;
	order: $int;
	order: $int;
}

@mixin flex-grow($int: 1) {
	box-flex: $int;
	box-flex: $int;
	flex-grow: $int;
	flex-grow: $int;
	flex-positive: $int;
}

@mixin flex-shrink($int: 0) {
	flex-negative: $int;
	flex-shrink: $int;
	flex-shrink: $int;
	flex-shrink: $int;
}

@mixin flex-basis($value: auto) {
	flex-basis: $value;
	flex-basis: $value;
	flex-preferred-size: $value;
}

@mixin flex($fg: 1, $fs: 0, $fb: auto) {
	// Set a variable to be used by box-flex properties
	$fg-boxflex: $fg;

	// Box-Flex only supports a flex-grow value so lets grab the
	// first item in the list and just return that.
	@if type-of($fg) == 'list' {
		$fg-boxflex: nth($fg, 1);
	}

	-webkit-box: $fg-boxflex;
	-moz-box: $fg-boxflex;
	flex: $fg $fs $fb;
	flex: $fg $fs $fb;
	-ms-flexbox: $fg $fs $fb;
}
